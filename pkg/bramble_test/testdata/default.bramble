def fetch_url(url):
    """
    fetch_url is a handy wrapper around the built-in fetch_url builder. Just takes
    the url you want to fetch.
    """
    return derivation(name="fetch-url", builder="fetch_url", env={"url": url})


def fetch_busybox():
    return fetch_url("https://brmbl.s3.amazonaws.com/busybox-x86_64.tar.gz")


def busybox():
    """
    busybox downloads the busybox binary and copies it to an output directory.
    Symlinks are then created for every command busybox supports.
    """
    return derivation(
        name="busybox",
        builder=fetch_busybox().out + "/busybox-x86_64",
        args=["sh", "./script.sh"],
        sources=files(["./script.sh"]),
        env={"busybox_download": fetch_busybox()},
    )


def hello_world():
    bb = busybox()
    PATH = "{}/bin".format(bb.out)

    return derivation(
        "say_hello_world",
        builder=bb.out + "/bin/sh",
        env=dict(PATH=PATH, busybox=bb.out),
        args=[
            "-c",
            """set -e

        mkdir -p $out/bin
        touch $out/bin/say-hello-world
        chmod +x $out/bin/say-hello-world

        echo "#!$busybox/bin/sh" > $out/bin/say-hello-world
        echo "$busybox/bin/echo Hello World!" >> $out/bin/say-hello-world

        $out/bin/say-hello-world
        """,
        ],
    )


def script_derivation(name, script, **kwargs):
    bb = busybox()

    PATH = "{}/bin".format(bb.out)
    env = kwargs.get("env", {})
    if kwargs.get("env"):
        kwargs.pop("env")
    env.update(dict(PATH=PATH, busybox=bb.out))
    return derivation(
        name,
        builder=bb.out + "/bin/sh",
        env=env,
        args=["-c", script],
        **kwargs,
    )
